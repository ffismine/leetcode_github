# -*- coding:utf-8 -*-
# Author : Zhang Xie
# Date : 2020/3/17 3:48

"""
假设你是一位很棒的家长，想要给你的孩子们一些小饼干。
但是，每个孩子最多只能给一块饼干。
对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。
如果 sj >= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。
你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
注意：你可以假设胃口值为正。一个小朋友最多只能拥有一块饼干。

示例 1:
输入: [1,2,3], [1,1]
输出: 1
解释:
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。

示例 2:
输入: [1,2], [1,2,3]
输出: 2
解释:
你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
你拥有的饼干数量和尺寸都足以让所有孩子满足。
所以你应该输出2.
"""

'''
思考：以[5 10 2 9 15 9]和[6 1 20 3 8]为例，饼干1被丢弃，6 3 8至多只能满足5 2 剩下的20随意满足一个
因此最终输出3

先进行排序，有以下结论：
某个饼干不能满足某个孩子，那么一定不能满足需求更大的：如1满足不了2
某个孩子可以用更小的饼干满足，那么没必要用更大的，
可以保留大饼干满足需求更大的孩子（贪心）：如3可以满足2

按照从小到大顺序尝试，每个饼干尝试一次，如果成功，换下一个孩子，直到没有更多的孩子或者更多的饼干
其实就是双指针，不成功饼干指针后移，成功共同后移
'''


class Solution:
    def findContentChildren(self, g, s) -> int:
        chlid = 0
        g.sort(reverse = True)
        s.sort(reverse = True)
        while g and s:
            if s[-1] >= g[-1]:
                chlid +=1
                g.pop()
            s.pop()
        return chlid

Solution().findContentChildren([1,2,3], [1,1])