# -*- coding:utf-8 -*-
# Author : Zhang Xie
# Date : 2020/4/23 19:07

# 题目描述：
# 货币数值的规范化是金融公司的一个问题，现在你需要写一个程序来解决这一问题：
# 1.货币数值的整数部分要求每3位加一个英文逗号','（不含引号）。例如12345678应该规范化为12,345,678
# 2.货币数值最多只有两位小数，如果有多余的小数位数应当舍去。注意，不是四舍五入。
# 3.负数代表欠款，在规范化后应当在数值两端加上括号 '(' 和 ')' ，然后省略掉负号。
# 4.应当在数值前面，前括号后面（如果有括号的话）加上金钱符号'$'（不含引号）
#
# 现在给你一个数字，请你规范化这一数字
#
# 输入
# 输入包含多种数据，每组数据一行一个数字，可能为小数，整数，负整数，负小数或者零。

# 数据保证数字没有前导0，保证不会出现欠0元的情况

# 输出
# 输出规范化后的内容
#
# 样例输入
# 203323
# 0.0
# 0.000000
# 0.009212121
# 343444323.32432
# -12344.1
# -12345678.9
# 样例输出
# $203,323.00
# $0.00
# $0.00
# $0.00
# $343,444,323.32
# ($12,344.10)
# ($12,345,678.90)
#
# 提示
# 范围
# 每个字符串长度不会超过100

s1 = ['203323','0.0','0.000000','0.009212121','343444323.32432','-12344.1','-12345678.9']
# 1.货币数值的整数部分要求每3位加一个英文逗号','（不含引号）。例如12345678应该规范化为12,345,678
# 2.货币数值最多只有两位小数，如果有多余的小数位数应当舍去。注意，不是四舍五入。
# 3.负数代表欠款，在规范化后应当在数值两端加上括号 '(' 和 ')' ，然后省略掉负号。
# 4.应当在数值前面，前括号后面（如果有括号的话）加上金钱符号'$'（不含引号）
# $203,323.00
# $0.00
# $0.00
# $0.00
# $343,444,323.32
# ($12,344.10)
# ($12,345,678.90)


def dou(s):
    xx = ''
    a = 0
    for x in s[::-1]:
        a += 1
        if a % 3 == 0 and a != len(s):
            x = ',' + x
            xx = x + xx
        else:
            xx = x + xx
    return xx


def fun(s):
    flag = 0
    if s.startswith('-'): #负数
        flag = 1
        s = s[1:]

    if len(s.split('.')) > 1 :
        a = s.split('.')
        # 对a[0] 处理
        a[0] = dou(a[0])
        if len(a[1]) > 1:
            return [a[0] + '.' + a[1][0:2],flag]
        else:
            return [a[0] + '.' + a[1] + '0',flag]
    else:
        return [dou(s) + '.00', flag]


#可能为小数，整数，负整数，负小数或者零。



for x in s1:
    a = fun(x)
    if a[1] == 0:
        print('$'+a[0])
    else:
        print('(' +'$'+a[0]+')')




